package problem0012;

import static com.google.common.base.Preconditions.checkArgument;

import java.util.List;
import java.util.OptionalLong;
import java.util.function.LongSupplier;
import java.util.stream.LongStream;
import utils.PrimeFactorization;
import utils.PrimeFactor;

/**
 * Highly divisible triangular number
 * <p>
 * Problem 12
 * <p>
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * <p>
 * 3: 1,3
 * <p>
 * 6: 1,2,3,6
 * <p>
 * 10: 1,2,5,10
 * <p>
 * 15: 1,3,5,15
 * <p>
 * 21: 1,3,7,21
 * <p>
 * 28: 1,2,4,7,14,28
 * <p>
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */
public class HighlyDivisibleTriangularNumber {

  public static long compute(final int minNumberOfDivisors) {
    checkArgument(minNumberOfDivisors >= 1);

    if (minNumberOfDivisors == 1) {
      // Unit 1 is special: it has no prime factorization.
      return 1;
    }

    OptionalLong result = LongStream
        .generate(new TriangularNumbersSupplier())
        .skip(1)  // Unit 1 is special: it has no prime factorization.
        .filter(value -> countDivisors(value) >= minNumberOfDivisors)
        .findFirst();

    return result.isPresent() ? result.getAsLong() : -1;
  }

  static long countDivisors(final long number) {
    List<PrimeFactor> f = PrimeFactorization.of(number).factors();
    return f.stream()
        .mapToLong(p -> p.power() + 1)
        .reduce(1, (left, right) -> left * right);
  }

  private static class TriangularNumbersSupplier implements LongSupplier {

    private long ordinal = 0;
    private long number = 0;

    @Override
    public long getAsLong() {
      ordinal += 1;
      number = Math.addExact(number, ordinal);
      return number;
    }
  }
}
